import NextAuth from 'next-auth';
import EmailProvider from 'next-auth/providers/email';
import { MongoDBAdapter } from '@next-auth/mongodb-adapter';
import clientPromise from '@/lib/mongodb';
import tlds from '@/lib/tlds-autogenerated.json';

export default NextAuth({
  adapter: MongoDBAdapter(clientPromise),
  providers: [
    EmailProvider({
      server: process.env.SMTP_SERVER,
      from: 'no-reply@ln2.email',
      maxAge: 600
    }),
  ],
  callbacks: {
    async session({ session, user }) {
      Object.assign(session, {
        userId: user.id,
      });
      return session;
    },
    async signIn({ user }) {
      try {
        if (!user.email) {
          return 'Must sign in with email';
        }
        const emailParts = user.email.split('@');
        if (emailParts.length !== 2) {
          return 'Malformed email';
        }
        const [, domain] = emailParts;
        const domainSuffix = domain.split('.').slice(1).join('.');
        if (!tlds.includes(domainSuffix)) {
          return './?error=UnsupportedTld';
        }
        if (process.env.NODE_ENV !== 'development') {
          const subdomain = `*.${domainSuffix}.ln2.email`;
          const domainResponse = await fetch(
            `https://api.vercel.com/v9/projects/${process.env.PROJECT_ID_VERCEL}/domains/${subdomain}`,
            {
              method: 'GET',
              headers: {
                Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
                'Content-Type': 'application/json',
              }
            }
          );
          if (!domainResponse.ok) {
            if (domainResponse.status !== 404) {
              console.error(`Failed to check subdomain: ${domainResponse.status}`);
              return './?error=FailedToRegisterTld';
            }
            const addSubdomainResponse = await fetch(
              `https://api.vercel.com/v9/projects/${process.env.PROJECT_ID_VERCEL}/domains`,
              {
                method: 'POST',
                headers: {
                  Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: subdomain })
              }
            );
            if (!addSubdomainResponse.ok) {
              console.error(`Failed to add subdomain: ${domainResponse.status}`);
              return './?error=FailedToRegisterTld';
            }
            await addSubdomainResponse.json();
          }
        }
      } catch (error) {
        console.error(`Auth signin failed: ${error}`);
        return './?error=default';
      }
      return true;
    }
  },
  session: {
    maxAge: 3600,
    updateAge: 600
  }
});
